---
title: "Week 5 Lab: Time Series Exploratory Data Analysis (EDA)"
format: 
  html:
    theme: zephyr
    toc: true
---


![](includes/generic_forecasting.webp)

::: {style="font-size: 1.5em"}
This Lab Contributes to Course Objectives: 2, 3, 4, 5, 8
:::

## Learning Objectives R

- Reading in time series data

- Understand how to work with dates


## Learning Objectives Tableau

- Understand date functions

- Use date functions in calculated fields

- Visualizing time series data 

- Visualizing structural breaks 


# Time series with R 

The overall objective of this lab is to acquaint you with time series data.  Time series data is very common but not standardized.  Importantly, the notion of a date (and time) is foreign to machines.  They treat dates and times as numbers or counts relative to some start of time (usually called the epoch).  R uses January 1, 1970 as the epoch.  In contrast, MS Excel uses January 1, 1900 as the epoch.^[https://knowledge.broadcom.com/external/article/57052/how-to-convert-unix-epoch-time-values-in.html#:~:text=Epoch%20%2F%20UNIX%20time%20is%20the,on%20the%2070%20years%20difference.]  Prove it to yourself:
```{r}
#epoch
as.numeric(as.Date("1970-01-01"))

#add one day to see how dates are tracked
as.numeric(as.Date("1970-01-02"))
```

## Importing time series data

Importing time series data is similar to other types of data.  However, one needs to be aware of the date (or date and time). We have collected egg price data from the [St. Louis FED](https://fred.stlouisfed.org/series/APU0000708111) database called the Federal Reserve Economic Database (FRED).  You can download the data [here](../inputs/APU0000708111.csv), save it to your machine (and upload it to the server), and read it into R. Or, you can put the hyperlink directly into the `read_csv()` function.  Don't forget the steps to starting an R script: description of the script (comment), load (install if necessary) needed packages, set working directory.

```{r}
#| eval: false

#From your machine or the server
egg_raw <- read_csv("your_path/APU0000708111.csv")

```

```{r}
#| include: false

library(readr)
library(dplyr)

#From your machine or the server
egg_raw <- read_csv("https://csu-arec-330.github.io/materials/unit_01/inputs/APU0000708111.csv")

```

The `read_csv()` function will try to guess the data type.  In this case, it correctly identifies the variable `DATE` as a date. Check the data type of the variable by looking at the dataframe.

```{r}
glimpse(egg_raw)
```

There are many instances where you collect data that has a date obvious to humans but not machines. In these cases, you need to give R some guidance.  We will use functions from the library called `lubridate`, designed to help work with dates. Read in a modified version of the data that you can download [here](https://csu-arec-330.github.io/materials/unit_01/inputs/APU0000708111_cdate.csv). I assigned the dataframe to an object called `egg_raw_c` to avoid overwriting the existing data.

```{r}
#| include: false

library(lubridate)
library(tidyquant)

#From your machine or the server
egg_raw_c <- read_csv("https://csu-arec-330.github.io/materials/unit_01/inputs/APU0000708111_cdate.csv")

```

```{r}
glimpse(egg_raw_c)
```

We need to tell R how to interpret that date. `lubridate` contains many functions to help with this.  See the [documentation](https://lubridate.tidyverse.org/index.html) for more information and examples. 
```{r}
egg_raw_c %>%
  mutate(DATE=mdy(CHAR_DATE)) %>%
  glimpse()
```

<video here>

## Accessing data via API

API stands for Application Programming Interface and they facilitate much of the communication across the modern web.   

![API schematic. Source: https://www.altexsoft.com/blog/engineering/what-is-api-definition-types-specifications-documentation/](https://content.altexsoft.com/media/2019/06/1.png)

We can use APIs to query data. FRED maintains an API that can be accessed using the library `tidyquant`.  This library has a large array of finance analysis tools.  Right now, we will just use it to access FRED data.  `tidyquant` is installed on the server, but you may need to install it on your own machine (e.g., `install.packages("tidyquant")`). Load the library. See the [documentation](https://business-science.github.io/tidyquant/) for information on how to use the functions.  For this exercise, we will use the function `tq_get()` to access the FRED API.  Inspect the help for this particular function to see how to use it. This function can do many things so we need to be specific with some parameters:

- First, we need to find the unique identifier from FRED that points to the data we want.  In this case, we are going to grab the same data that we downloaded, and the unique identifer happens to be the file name `"APU0000708111"`. Remember the quotes.

- Second, the documentation tells us that to access data from FRED we need to set the `get` parameter to `"economic.data"`

- Third, we can specify the date range with the `from` and `to` parameters.  Remember to use the YYYY-MM-DD format.

```{r}
#| eval: false
#install.packages("tidquant")
library(tidyquant,quietly = T)
```

```{r}

egg_raw_tq <- tq_get(c("APU0000708111"),get = "economic.data",from="1990-01-01",to="2023-02-23")

glimpse(egg_raw_tq)
```

You can download multiple time series at once by using a vector of identifiers. Let's download the producer price index to compare to the retail price of a dozen eggs.  The identifier is `WPU017107`.  Note that I am going to overwrite the existing object `egg_raw_tq` because I am going to download the retail price series as well as the producer price index.

```{r}

egg_raw_tq <- tq_get(c("APU0000708111","WPU017107"),get = "economic.data",from="1990-01-01",to="2023-02-23")

glimpse(egg_raw_tq)
```

Notice that there are still 3 columns.  The new data is stacked.  We can confirm this a few ways:

1. Use the `unique()` function to see what values for symbol are in the dataset
```{r}
unique(egg_raw_tq$symbol)
```

2. Use `table()` to see the counts by each value
```{r}
table(egg_raw_tq$symbol)
```

>Why does the retail series `APU0000708111` have more observations?

## Replacing values based on a criteria

The time series are currently identified by the variable `symbol`.  These codes are not informative.  Let's replace them with better labels.  There is a function in the `dplyr` package called `case_when()` designed for this purpose.
```{r}
egg_out <- egg_raw_tq %>%
  mutate(description=case_when(
    symbol == "APU0000708111" ~ "Retail Price", #if symbol equals APU0000708111, then replace value with Retail Price
    symbol == "WPU017107" ~ "Producer Price"
  ))
```

Now the dataset is ready for export in .csv format so you can import it into Tableau.




# Tableau




